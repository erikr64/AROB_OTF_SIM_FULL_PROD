-- UPDATE FROM TESTING -> CHANGE ALL .TEST ING to .DBO
-- DIFFERENCES FROM CURRENT:
--     _Curr ent to _Simulation

-- Last Update: 3/26/2025 @10:40am

create or replace task Step_2B_RFPGen_Simulation
    warehouse = INVENTORYMODEL_WH
    as begin

-- create or replace temp table fc_data as (
-- drop table if exists Cumulative_Calc;
--2m 4s currently; 37s after updating to temp tables

--Constraint setup
-- 13	Required Shipment Cube - Min
-- 14	Required Shipment Cube - Max
-- 15	Required Shipment Weight - Min
-- 16	Required Shipment Weight - Max

------------------------------------------------------------------------------------------------------------------
------------------------------------------Add back non-constrained items------------------------------------------
------------------------------------------------------------------------------------------------------------------
create or replace temp table FIFO_COST as (
Select * from LAKEHOUSE.FINANCE_COSTING.FIFOCACHE Fifo
-- INNER JOIN (Select max(DM_UPDATEDON) as MaxDate from LAKEHOUSE.FINANCE_COSTING.FIFOCACHE) as MaxDate on MaxDate.MaxDate = Fifo.DM_UPDATEDON
--Where ITEMID = 243726
);

create or replace temp table Constraint_Setup as (
Select
    ITEMID,
    SUPPLIERID,
    CASE WHEN ORDER_TYPE = 'Domestic' THEN 'domestic' ELSE 'import' END as ORDERTYPE,
    CASE WHEN C1 IS NOT NULL THEN 1 WHEN C2 IS NOT NULL THEN 1
        WHEN C3 IS NOT NULL THEN 1 WHEN C4 IS NOT NULL THEN 1
        WHEN C5 IS NOT NULL THEN 1 WHEN C6 IS NOT NULL THEN 1
        WHEN C7 IS NOT NULL THEN 1 WHEN C8 IS NOT NULL THEN 1
        WHEN C9 IS NOT NULL THEN 1 WHEN C10 IS NOT NULL THEN 1
        WHEN C11 IS NOT NULL THEN 1 WHEN C12 IS NOT NULL THEN 1
        WHEN C13 IS NOT NULL THEN 1 WHEN C14 IS NOT NULL THEN 1
        WHEN C15 IS NOT NULL THEN 1 WHEN C16 IS NOT NULL THEN 1 ELSE NULL END as ANY_CONSTRAINT
    -- IFNULL(C1,IFNULL(C2,IFNULL(C3,IFNULL(C4,IFNULL(C5,IFNULL(C6,IFNULL(C7,IFNULL(C8,IFNULL(C9,IFNULL(C10,IFNULL(C11,IFNULL(C12,IFNULL(C13,IFNULL(C14,IFNULL(C15,C16))))))))))))))) as ANY_CONSTRAINT
from INVENTORYSANDBOX.DBO.IB_CONSTRAINTS
);

create or replace temp table NetworkOrder as (
Select
    ITEMID,
    UPDATED_ORDERTYPE,
    OTF,
    LT,
    SUM(CAP_ORDERQTY_USED) as NetOrder
from inventorysandbox.DBO.RFP_Simulation_ordering_sim
GROUP BY ITEMID, UPDATED_ORDERTYPE, OTF, LT
HAVING SUM(CAP_ORDERQTY_USED) <= 0
);


-- --New added 3/25/2025
create or replace temp table FC_CASEROUND as (
Select
    ITEMID,
    FC,
    UPDATED_ORDERTYPE,
    OTF,
    LT,
    RFP_ITERATION_COUNT,
    (round(CAP_ORDERQTY_USED / GREATEST(1, CASEQUANTITY)) * GREATEST(1, CASEQUANTITY)) as CASEROUND_V1
FROM inventorysandbox.DBO.RFP_Simulation_ordering_sim
-- WHERE ITEMID = 397185 AND OTF = 49
);

create or replace temp table FC_CASEROUND_SUM as (
Select
    ITEMID,
    UPDATED_ORDERTYPE,
    OTF,
    LT,
    RFP_ITERATION_COUNT,
    SUM(CASEROUND_V1) as CASEROUND_V1
FROM FC_CASEROUND
GROUP BY ITEMID, UPDATED_ORDERTYPE, OTF, LT, RFP_ITERATION_COUNT
);

create or replace temp table CASEROUND_DELTA as (
Select
    sim.ITEMID,
    sim.UPDATED_ORDERTYPE,
    sim.OTF,
    sim.LT,
    sim.RFP_ITERATION_COUNT,
    sim.CASEQUANTITY,
    MAX(CASEROUND_V1) as CASEROUND_V1,
    (round(SUM(sim.CAP_ORDERQTY_USED) / GREATEST(1, sim.CASEQUANTITY)) * GREATEST(1, sim.CASEQUANTITY)) as CASEROUND_NETWORK_V1,
    (MAX(CASEROUND_V1) - (round(SUM(sim.CAP_ORDERQTY_USED) / GREATEST(1, sim.CASEQUANTITY)) * GREATEST(1, sim.CASEQUANTITY))) / GREATEST(1, sim.CASEQUANTITY) as CASEPACKDELTA
FROM inventorysandbox.DBO.RFP_Simulation_ordering_sim sim
LEFT JOIN FC_CASEROUND_SUM on FC_CASEROUND_SUM.ITEMID = sim.ITEMID AND FC_CASEROUND_SUM.UPDATED_ORDERTYPE = sim.UPDATED_ORDERTYPE AND FC_CASEROUND_SUM.OTF = sim.OTF AND FC_CASEROUND_SUM.LT = sim.LT AND FC_CASEROUND_SUM.RFP_ITERATION_COUNT = sim.RFP_ITERATION_COUNT
-- WHERE sim.ITEMID = 397185 AND sim.OTF = 49
GROUP BY sim.ITEMID, sim.UPDATED_ORDERTYPE, sim.OTF, sim.LT, sim.RFP_ITERATION_COUNT, sim.CASEQUANTITY
);

create or replace temp table ADDBACK_SIMSETUP as (
Select
    sim.*,
    CASEPACKDELTA,
    CASE WHEN ABS(CASEPACKDELTA) < RANK() OVER (PARTITION BY sim.ITEMID, sim.UPDATED_ORDERTYPE, sim.OTF, sim.LT, sim.RFP_ITERATION_COUNT ORDER BY (CAP_ORDERQTY_USED + (UNIFORM( 0, 100000, random()) / 1000000)) DESC) THEN 0
        WHEN CASEPACKDELTA < 0 THEN sim.CASEQUANTITY ELSE -sim.CASEQUANTITY END as CASEPACK_ADJUST
FROM inventorysandbox.DBO.RFP_Simulation_ordering_sim sim
LEFT JOIN CASEROUND_DELTA on CASEROUND_DELTA.ITEMID = sim.ITEMID AND CASEROUND_DELTA.UPDATED_ORDERTYPE = sim.UPDATED_ORDERTYPE AND CASEROUND_DELTA.OTF = sim.OTF AND CASEROUND_DELTA.LT = sim.LT AND CASEROUND_DELTA.RFP_ITERATION_COUNT = sim.RFP_ITERATION_COUNT
-- WHERE sim.ITEMID = 397185 AND sim.OTF = 49
);
--End of new added 3/25/2025

create or replace temp table ADDBACK as (
Select
    CAST(sim.ITEMID AS VARCHAR(50)) as ITEMID, sim.SUPPLIERID, FC,
    CASE WHEN FC = 'WA' THEN 'SEA' WHEN FC = 'NV' THEN 'LAS' WHEN FC = 'NE' THEN 'LNK' WHEN FC = 'TX' THEN 'DFW' WHEN FC = 'IN' THEN 'IND' WHEN FC = 'PA' THEN 'AVP' ELSE 'SAV' END as FC_CODE,
    sim.ORDERTYPE, sim.UPDATED_ORDERTYPE, sim.OTF, sim.LT, CAP_DOS, ITERATION_COUNT, RFP_ITERATION_COUNT,
    CAP_ORDERQTY_USED as Output_Original,
    CAP_ORDERQTY_USED * FIFOAVERAGECOST as Output_OriginalCost,
    0 as FC_Limited,
    0 as Redistribution_Qty,
    CAP_ORDERQTY_USED as Output_Redistributed,
    CAP_ORDERQTY_USED * FIFOAVERAGECOST as Output_RedistributedCost,
    GREATEST(1, sim.CASEQUANTITY) as CASEQUANTITY, prod.itemcube as ITEMCUBE,
    FIFOAVERAGECOST,
    null as Item_Constraint_Used,
    null as Item_MOQMOV_Type,
    CAP_ORDERQTY_USED as Redistribution_Qty_ItemMOQ,
    null as Constraint_Total_Applicable,
    null as Roundup_ItemMOQ,
    CAP_ORDERQTY_USED as Output_OrderQty_ItemMOQ,
    IFNULL(CAP_ORDERQTY_USED * FIFOAVERAGECOST, 0) as Output_OrderCost_ItemMOQ,
    'round' as Case_RoundType,
    CASEPACKDELTA as Network_CasePackCount_Variance,
    CASEPACK_ADJUST as CasePackAdjust,
    (round(CAP_ORDERQTY_USED / GREATEST(1, sim.CASEQUANTITY)) * GREATEST(1, sim.CASEQUANTITY)) + CASEPACK_ADJUST as Output_CaseRoundQty,
    IFNULL(((round(CAP_ORDERQTY_USED / GREATEST(1, sim.CASEQUANTITY)) * GREATEST(1, sim.CASEQUANTITY)) + CASEPACK_ADJUST) * FIFOAVERAGECOST, 0) as Output_CaseRoundCost,
    null as Item_Pallet_Type,
    null as Item_Pallet_Constraint,
    0 as Item_Pallet_TotalRound,
    (round(CAP_ORDERQTY_USED / GREATEST(1, sim.CASEQUANTITY)) * GREATEST(1, sim.CASEQUANTITY)) + CASEPACK_ADJUST as Output_ItemPalletQty,
    IFNULL(((round(CAP_ORDERQTY_USED / GREATEST(1, sim.CASEQUANTITY)) * GREATEST(1, sim.CASEQUANTITY)) + CASEPACK_ADJUST) * FIFOAVERAGECOST, 0) as Output_ItemPalletCost,
    null as Brand_MOV_Type,
    null as Brand_MOV_Used,
    0 as MOV_RoundUnits,
    0 as MOV_ReqRoundAdd_Pallet,
    (round(CAP_ORDERQTY_USED / GREATEST(1, sim.CASEQUANTITY)) * GREATEST(1, sim.CASEQUANTITY)) + CASEPACK_ADJUST as Output_BrandMOVQty,
    IFNULL(((round(CAP_ORDERQTY_USED / GREATEST(1, sim.CASEQUANTITY)) * GREATEST(1, sim.CASEQUANTITY)) + CASEPACK_ADJUST) * FIFOAVERAGECOST, 0) as Output_BrandMOVCost,
    "Last Modified"
from ADDBACK_SIMSETUP sim
LEFT JOIN FIFO_COST on FIFO_COST.ITEMID = sim.ITEMID
LEFT JOIN LAKEHOUSE.PROCUREMENT_ORDERING.PRODUCT prod on prod.ITEMID = sim.ITEMID
LEFT JOIN Constraint_Setup CON_ITEM ON CON_ITEM.ITEMID = sim.ITEMID AND CON_ITEM.ORDERTYPE = sim.ordertype
LEFT JOIN Constraint_Setup CON_BRAND ON CON_BRAND.SUPPLIERID = sim.SUPPLIERID AND CON_BRAND.ORDERTYPE = sim.ordertype AND CON_BRAND.ITEMID IS NULL
LEFT JOIN NetworkOrder on NetworkOrder.ITEMID = sim.ITEMID AND NetworkOrder.UPDATED_ORDERTYPE = sim.updated_ordertype AND NetworkOrder.OTF = sim.OTF AND NetworkOrder.LT = sim.LT
WHERE (CON_ITEM.ANY_CONSTRAINT IS NULL AND CON_BRAND.ANY_CONSTRAINT IS NULL)
OR NetworkOrder.ITEMID IS NOT NULL
);

create or replace temp table OriginalOutput as (
Select V2.* 
from inventorysandbox.DBO.RFP_Simulation_IB_optimization V2
INNER JOIN (Select MAX(RFP_ITERATION_COUNT) as MAXCOUNT from inventorysandbox.DBO.RFP_Simulation_IB_optimization) MAXCOUNT on MAXCOUNT.MAXCOUNT = V2.RFP_ITERATION_COUNT
);

create or replace temp table IBOptUse as (
Select * from ADDBACK
UNION ALL
Select * from OriginalOutput
);
------------------------------------------------------------------------------------------------------------------
------------------------------------------End of Add back non-constrained items------------------------------------------
------------------------------------------------------------------------------------------------------------------



create or replace temp table CONSTRAINTS as (
Select
    SUPPLIERID,
    CASE WHEN ORDER_TYPE = 'Domestic' THEN 'domestic' ELSE 'import' END as ORDER_TYPE,
    CASE WHEN C14 IS NOT NULL AND C13 IS NULL THEN C14 - 50 ELSE C13 END as ShipCubeMin,
    CASE WHEN C13 IS NOT NULL AND C14 IS NULL THEN C13 + 50 ELSE C14 END as ShipCubeMax,
    CASE WHEN C16 IS NOT NULL AND C15 IS NULL THEN C16 - 500 ELSE C15 END as ShipWeightMin,
    CASE WHEN C15 IS NOT NULL AND C16 IS NULL THEN C15 + 500 ELSE C16 END as ShipWeightMax
from INVENTORYSANDBOX.DBO.IB_CONSTRAINTS
WHERE LEVEL = 'Brand'
AND (C13 > 0 OR C14 > 0 OR C15 > 0 OR C16 > 0)
);

create or replace temp table AGG_ORDERVALUES as (
Select
    IB_Opt.SUPPLIERID,
    IB_Opt.FC,
    IB_Opt.FC_CODE,
    IB_Opt.UPDATED_ORDERTYPE,
    SUM(ITEMCUBE * OUTPUT_BRANDMOVQTY) as AGG_ORDER_CUBE,
    SUM(WEIGHTLBS * OUTPUT_BRANDMOVQTY) as AGG_ORDER_WEIGHT,
    SUM(OUTPUT_BRANDMOVCOST) as AGG_ORDER_COST

from IBOptUse IB_Opt
    LEFT JOIN LAKEHOUSE.M2_DBO.BTITEMS on LAKEHOUSE.M2_DBO.BTITEMS.ITEMID = IB_Opt.ITEMID
    INNER JOIN (Select MAX(RFP_ITERATION_COUNT) as MAXCOUNT FROM IBOptUse) MAXCOUNT on MAXCOUNT.MAXCOUNT = IB_Opt.RFP_ITERATION_COUNT
GROUP BY 
    IB_Opt.SUPPLIERID,
    IB_Opt.FC,
    IB_Opt.FC_CODE,
    IB_Opt.UPDATED_ORDERTYPE
);


--Baseline setup with origins
create or replace temp table BASELINE_DATA as (
Select
    IB_Opt.SUPPLIERID,
    IB_Opt.FC,
    IB_Opt.FC_CODE,
    IB_Opt.ORDERTYPE,
    IB_Opt.UPDATED_ORDERTYPE,
    ORIGIN.MULTIPLE_ORIGIN,
    ORIGIN.ORIGIN,
    ORIGIN.ORIGIN_STATE,
    OTF,
    LT,
    RFP_ITERATION_COUNT,
    -- CASE WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'domestic' AND MIN(AGG_ORDER_CUBE) > 1800) THEN 2250 WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'domestic' AND MIN(AGG_ORDER_CUBE) > 900) THEN 1250 
    --     WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'domestic' AND MIN(AGG_ORDER_CUBE) > 100) THEN 100 WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'domestic') THEN 20
    --     WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'import') THEN 2000 ELSE CONSTRAINTS.ShipCubeMin END as ShipCubeMin,
    -- CASE WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'domestic' AND MIN(AGG_ORDER_CUBE) > 1800) THEN 3100 WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'domestic' AND MIN(AGG_ORDER_CUBE) > 900) THEN 2250 
    --     WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'domestic' AND MIN(AGG_ORDER_CUBE) > 100) THEN 900 WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'domestic') THEN 100
    --     WHEN (CONSTRAINTS.SUPPLIERID IS NULL AND IB_OPT.ORDERTYPE = 'import') THEN 2500 ELSE CONSTRAINTS.ShipCubeMax END as ShipCubeMax,
    TARGET.FREIGHT_CUBE_TARGET as ShipCubeMin,
    TARGET.FREIGHT_CUBE_MAX as ShipCubeMax,
    IFNULL(CONSTRAINTS.ShipWeightMin, 1) as ShipWeightMin,
    IFNULL(CONSTRAINTS.ShipWeightMax, 43000) as ShipWeightMax,
    
    SUM(ITEMCUBE * OUTPUT_BRANDMOVQTY) as ORDER_CUBE,
    CASE WHEN SUM(ITEMCUBE * OUTPUT_BRANDMOVQTY) = 0 THEN 0 ELSE SUM(ITEMCUBE * OUTPUT_BRANDMOVQTY) + ORIGIN.ORIGIN_RAND END as ORDER_CUBE_RAND,
    SUM(WEIGHTLBS * OUTPUT_BRANDMOVQTY) as ORDER_WEIGHT,
    SUM(OUTPUT_BRANDMOVCOST) as ORDER_COST,
    MIN(AGG_ORDER_CUBE) as AGG_ORDER_CUBE,
    MIN(AGG_ORDER_WEIGHT) as AGG_ORDER_WEIGHT,
    MIN(AGG_ORDER_COST) as AGG_ORDER_COST

from IBOptUse IB_Opt
    LEFT JOIN LAKEHOUSE.M2_DBO.BTITEMS on LAKEHOUSE.M2_DBO.BTITEMS.ITEMID = IB_Opt.ITEMID
    LEFT JOIN inventorysandbox.dbo.ERVW_RFP_ITEMORIGIN ORIGIN on ORIGIN.ITEMID = IB_Opt.ITEMID AND ORIGIN.ORDERTYPE = IB_Opt.ORDERTYPE AND ORIGIN.UPDATED_ORDERTYPE = IB_Opt.updated_ordertype
    INNER JOIN (Select MAX(RFP_ITERATION_COUNT) as MAXCOUNT FROM IBOptUse) MAXCOUNT on MAXCOUNT.MAXCOUNT = IB_Opt.RFP_ITERATION_COUNT
    LEFT JOIN CONSTRAINTS on CONSTRAINTS.SUPPLIERID = IB_OPT.SUPPLIERID AND CONSTRAINTS.ORDER_TYPE = IB_OPT.ORDERTYPE
    LEFT JOIN AGG_ORDERVALUES on AGG_ORDERVALUES.SUPPLIERID = IB_OPT.SUPPLIERID AND AGG_ORDERVALUES.FC = IB_OPT.FC AND AGG_ORDERVALUES.UPDATED_ORDERTYPE = IB_OPT.UPDATED_ORDERTYPE
    LEFT JOIN INVENTORYSANDBOX.DBO.ER_SHIPCUBE_TARGET TARGET on TARGET.SUPPLIERID = IB_Opt.SUPPLIERID AND TARGET.ORDERTYPE = IB_Opt.ORDERTYPE AND TARGET.ORIGIN = ORIGIN.ORIGIN
GROUP BY 
    IB_Opt.SUPPLIERID,
    CONSTRAINTS.SUPPLIERID,
    IB_Opt.FC,
    IB_Opt.FC_CODE,
    IB_Opt.ORDERTYPE,
    IB_Opt.UPDATED_ORDERTYPE,
    OTF,
    LT,
    RFP_ITERATION_COUNT,
    ORIGIN.MULTIPLE_ORIGIN,
    ORIGIN.ORIGIN,
    ORIGIN.ORIGIN_STATE,
    CONSTRAINTS.ShipCubeMin,
    CONSTRAINTS.ShipCubeMax,
    CONSTRAINTS.ShipWeightMin,
    CONSTRAINTS.ShipWeightMax,
    ORIGIN.ORIGIN_RAND,
    TARGET.FREIGHT_CUBE_TARGET,
    TARGET.FREIGHT_CUBE_MAX
);

create or replace temp table CONSOLIDATION_DECISION as (
Select
    BASELINE_DATA.*,
    CASE WHEN (ROUND(ORDER_CUBE,0) = 0) THEN 'NO_ORDER'
        WHEN (ROUND(ORDER_CUBE,0) = ROUND(AGG_ORDER_CUBE,0) AND MULTIPLE_ORIGIN = 0) THEN 'SINGLE_ORIGIN'
        WHEN (ROUND(ORDER_CUBE,0) = ROUND(AGG_ORDER_CUBE,0) AND MULTIPLE_ORIGIN = 1) THEN 'NO_UNIQUE'
        WHEN (ORDER_CUBE >= ShipCubeMin AND MULTIPLE_ORIGIN = 0) THEN 'ABOVE_UNIQUE'
        WHEN (ORDER_CUBE >= ShipCubeMin AND MULTIPLE_ORIGIN = 1) THEN 'ABOVE_UNIQUE_MULTIPLE' 
        WHEN (AGG_ORDER_CUBE >= ShipCubeMin) THEN 'POSSIBLE_COMBINED'
        WHEN ((AGG_ORDER_CUBE * 1.15) >= ShipCubeMin) THEN 'POSSIBLE_COMBINED_ROUND'
        ELSE 'NO_ORDER' END as CONSOLIDATION_TYPE
FROM BASELINE_DATA
-- WHERE SUPPLIERID = 386 AND FC = 'GA'
);

create or replace temp table ORIGIN_RANK_BASELINESETUP as (
Select
    BASELINE_DATA.SUPPLIERID,
    BASELINE_DATA.FC,
    BASELINE_DATA.ORIGIN,
    SUM(BASELINE_DATA.ORDER_CUBE) as ORDERCUBE,
    -- MAX(CONS.CONSOLIDATION_TYPE) as CONSOLIDATION_TYPE,
    CASE WHEN (MAX(CONS.CONSOLIDATION_TYPE) = 'ABOVE_UNIQUE' OR MAX(CONS.CONSOLIDATION_TYPE) = 'ABOVE_UNIQUE_MULTIPLE') THEN SUM(BASELINE_DATA.ORDER_CUBE_RAND) / 250 ELSE SUM(BASELINE_DATA.ORDER_CUBE_RAND) END as ORDERCUBERAND_FOR_RANK
FROM BASELINE_DATA
LEFT JOIN CONSOLIDATION_DECISION CONS on CONS.SUPPLIERID = BASELINE_DATA.SUPPLIERID AND CONS.FC = BASELINE_DATA.FC 
    AND CONS.ORIGIN = BASELINE_DATA.ORIGIN AND CONS.MULTIPLE_ORIGIN = BASELINE_DATA.MULTIPLE_ORIGIN AND CONS.UPDATED_ORDERTYPE = BASELINE_DATA.UPDATED_ORDERTYPE AND CONS.MULTIPLE_ORIGIN = 0
-- WHERE BASELINE_DATA.SUPPLIERID = 531 AND BASELINE_DATA.FC = 'IN'
GROUP BY BASELINE_DATA.ORIGIN, BASELINE_DATA.SUPPLIERID, BASELINE_DATA.FC--, CONS.CONSOLIDATION_TYPE
);

create or replace temp table ORIGIN_RANK as (
Select
    ORIGIN_RANK_BASELINESETUP.*,
    -- CASE WHEN ORDERCUBE = 0 THEN 99 ELSE RANK() OVER (PARTITION BY SUPPLIERID, FC ORDER BY ORDERCUBERAND_FOR_RANK DESC) END as FC_ORIGINRANK
    RANK() OVER (PARTITION BY SUPPLIERID, FC ORDER BY ORDERCUBERAND_FOR_RANK DESC) as FC_ORIGINRANK
FROM ORIGIN_RANK_BASELINESETUP
-- WHERE SUPPLIERID = 2623 AND FC = 'IN'
);

--Now I know what I should do by FC, need to apply to item level. 
--First determine % of overlap that needs to go from origin then figure out which items that applies to. 
--Rank origins to create a cumulative available move beyond a round?
create or replace temp table DECISION_DATA as (
Select
    CONSOLIDATION_DECISION.*,
    FC_ORIGINRANK,
    GREATEST((SHIPCUBEMIN - ORDER_CUBE), 0) as ADJUSTMENT_REQUIRED,
    CASE WHEN CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0 
        WHEN ROUND((AGG_ORDER_CUBE - ORDER_CUBE), 0) = 0 THEN 0 ELSE GREATEST((SHIPCUBEMIN - ORDER_CUBE), 0) / (AGG_ORDER_CUBE - ORDER_CUBE) END as OVERLAP_PERCENT_NEED,
    RANK() OVER (PARTITION BY CONSOLIDATION_DECISION.SUPPLIERID, CONSOLIDATION_DECISION.FC, UPDATED_ORDERTYPE, OTF, LT, RFP_ITERATION_COUNT ORDER BY MULTIPLE_ORIGIN ASC) as DUPLICATE_ORIGINRANK
FROM CONSOLIDATION_DECISION
LEFT JOIN ORIGIN_RANK on ORIGIN_RANK.SUPPLIERID = CONSOLIDATION_DECISION.SUPPLIERID AND ORIGIN_RANK.FC = CONSOLIDATION_DECISION.FC AND ORIGIN_RANK.ORIGIN = CONSOLIDATION_DECISION.ORIGIN
-- WHERE (MULTIPLE_ORIGIN = 0 OR CONSOLIDATION_TYPE = 'SINGLE_ORIGIN')
-- WHERE CONSOLIDATION_DECISION.SUPPLIERID = 4298
-- AND CONSOLIDATION_DECISION.FC = 'NE'
-- AND MULTIPLE_ORIGIN = 1
);

create or replace temp table PreFinalOutputV1 as (
Select
    IB_Opt.SUPPLIERID,
    IB_Opt.RFP_ITERATION_COUNT,
    IB_Opt.FC,
    IB_Opt.ITEMID,
    ORIGIN.MULTIPLE_ORIGIN,
    ORIGIN.ORIGIN,
    IB_Opt.UPDATED_ORDERTYPE,    
    IB_Opt.ORDERTYPE,
    IB_Opt.OTF,
    IB_Opt.LT,
    SUM(ITEMCUBE * OUTPUT_BRANDMOVQTY) as ORDER_CUBE,
    DECISION_DATA.FC_ORIGINRANK,
    CASE WHEN (SUM(ITEMCUBE * OUTPUT_BRANDMOVQTY) = 0 OR ORIGIN.MULTIPLE_ORIGIN = 0) THEN NULL ELSE        
        RANK() OVER (PARTITION BY IB_Opt.SUPPLIERID, DECISION_DATA.FC_ORIGINRANK, IB_Opt.FC, IB_Opt.OTF, IB_Opt.LT ORDER BY SUM(ITEMCUBE * OUTPUT_BRANDMOVQTY) desc) END as ITEM_FCORIGINRANK, 
    DECISION_DATA.SHIPCUBEMIN as ORIGIN_CUBETARGET,
    DECISION_DATA.CONSOLIDATION_TYPE,
    DECISION_DATA.OVERLAP_PERCENT_NEED as ORIGIN_MULTIPLIER,
    AGG_ORDERVALUES.AGG_ORDER_CUBE

from IBOptUse IB_Opt
    LEFT JOIN LAKEHOUSE.M2_DBO.BTITEMS on LAKEHOUSE.M2_DBO.BTITEMS.ITEMID = IB_Opt.ITEMID
    LEFT JOIN inventorysandbox.dbo.ERVW_RFP_ITEMORIGIN ORIGIN on ORIGIN.ITEMID = IB_Opt.ITEMID AND ORIGIN.ORDERTYPE = IB_Opt.ORDERTYPE AND ORIGIN.UPDATED_ORDERTYPE = IB_Opt.updated_ordertype
    INNER JOIN (Select MAX(RFP_ITERATION_COUNT) as MAXCOUNT FROM IBOptUse) MAXCOUNT on MAXCOUNT.MAXCOUNT = IB_Opt.RFP_ITERATION_COUNT
    LEFT JOIN CONSTRAINTS on CONSTRAINTS.SUPPLIERID = IB_OPT.SUPPLIERID AND CONSTRAINTS.ORDER_TYPE = IB_OPT.ORDERTYPE
    LEFT JOIN AGG_ORDERVALUES on AGG_ORDERVALUES.SUPPLIERID = IB_OPT.SUPPLIERID AND AGG_ORDERVALUES.FC = IB_OPT.FC AND AGG_ORDERVALUES.UPDATED_ORDERTYPE = IB_OPT.UPDATED_ORDERTYPE
    LEFT JOIN DECISION_DATA on DECISION_DATA.SUPPLIERID = IB_Opt.SUPPLIERID AND DECISION_DATA.FC = IB_Opt.FC AND DECISION_DATA.UPDATED_ORDERTYPE = IB_Opt.UPDATED_ORDERTYPE AND 
        DECISION_DATA.OTF = IB_Opt.OTF AND DECISION_DATA.LT = IB_Opt.LT AND DECISION_DATA.RFP_ITERATION_COUNT = IB_Opt.RFP_ITERATION_COUNT AND DECISION_DATA.DUPLICATE_ORIGINRANK = 1

    
-- WHERE IB_Opt.SUPPLIERID = 531 --AND IB_Opt.ITEMID = 393159
GROUP BY 
    IB_Opt.SUPPLIERID,
    IB_Opt.RFP_ITERATION_COUNT,
    IB_Opt.FC,
    IB_Opt.ITEMID,
    ORIGIN.MULTIPLE_ORIGIN,
    ORIGIN.ORIGIN,
    IB_Opt.UPDATED_ORDERTYPE,    
    IB_Opt.ORDERTYPE,
    IB_Opt.OTF,
    IB_Opt.LT,
    DECISION_DATA.FC_ORIGINRANK,
    DECISION_DATA.SHIPCUBEMIN,
    DECISION_DATA.CONSOLIDATION_TYPE,
    DECISION_DATA.OVERLAP_PERCENT_NEED,
    AGG_ORDERVALUES.AGG_ORDER_CUBE

);

create or replace temp table PreFinalOutputV2 as (
Select
    PreFinalOutputV1.*,
    SUM(CASE WHEN MULTIPLE_ORIGIN = 0 THEN ORDER_CUBE ELSE NULL END) OVER (PARTITION BY SUPPLIERID, FC, UPDATED_ORDERTYPE, FC_ORIGINRANK, OTF, LT) as ORIGIN_UNIQUECUBE,
    GREATEST(0, ORIGIN_CUBETARGET - SUM(CASE WHEN MULTIPLE_ORIGIN = 0 THEN ORDER_CUBE ELSE NULL END) OVER (PARTITION BY SUPPLIERID, FC, UPDATED_ORDERTYPE, FC_ORIGINRANK, OTF, LT)) as ORIGIN_CUBENEED,

    CASE WHEN (MULTIPLE_ORIGIN = 0 OR ORDER_CUBE = 0) THEN NULL 
        ELSE SUM(CASE WHEN MULTIPLE_ORIGIN = 1 THEN ORDER_CUBE ELSE NULL END) OVER (PARTITION BY SUPPLIERID, FC, UPDATED_ORDERTYPE, FC_ORIGINRANK, OTF, LT ORDER BY ORDER_CUBE DESC) * 
            CASE WHEN CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(ORIGIN_MULTIPLIER, 1) ELSE 1 END - ORDER_CUBE END as CUMULATIVE_AVAIL
    
FROM PreFinalOutputV1
-- WHERE ITEMID = 263571
);

drop table if exists PreFinalOutputV1;




-- Select * from CONSOLIDATION_DECISION WHERE SUPPLIERID = 386 AND FC = 'IN'
-- AND CONSOLIDATION_TYPE NOT IN ('NO_UNIQUE', 'NO_ORDER')

create or replace temp table ORIGIN_MUSTFILL as (
Select
    V2.RFP_ITERATION_COUNT,
    V2.FC,
    V2.ITEMID,
    V2.OTF,
    V2.LT,
    --ANY ORIGIN Not NO_UNIQUE or NO_ORDER?
    COUNT(CONS.CONSOLIDATION_TYPE) as ORDERABLE_COUNT
    
FROM PreFinalOutputV2 V2
LEFT JOIN CONSOLIDATION_DECISION CONS on CONS.SUPPLIERID = V2.SUPPLIERID AND CONS.FC = V2.FC AND CONS.UPDATED_ORDERTYPE = V2.UPDATED_ORDERTYPE AND CONS.OTF = V2.OTF and CONS.LT = V2.LT
WHERE CONS.CONSOLIDATION_TYPE NOT IN ('NO_UNIQUE', 'NO_ORDER')
-- AND V2.ITEMID = 77015 AND V2.FC = 'IN'
GROUP BY V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.OTF, V2.LT
);



-- Select * from PreFinalOutputV2 WHERE SUPPLIERID = 386 AND FC = 'IN'


create or replace temp table MAXRANK as (
Select
    V2.SUPPLIERID,
    V2.RFP_ITERATION_COUNT,
    V2.FC,
    V2.ITEMID,
    V2.MULTIPLE_ORIGIN,
    V2.OTF,
    V2.LT,
    IFNULL(MAX(CASE WHEN V2.CONSOLIDATION_TYPE = 'NO_UNIQUE' OR V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN NULL ELSE FC_ORIGINRANK END), MAX(FC_ORIGINRANK)) as MAXRANK,
    --ANY ORIGIN Not NO_UNIQUE or NO_ORDER?
    ORIGIN_MUSTFILL.ORDERABLE_COUNT
FROM PreFinalOutputV2 V2
LEFT JOIN ORIGIN_MUSTFILL on ORIGIN_MUSTFILL.ITEMID = V2.ITEMID AND ORIGIN_MUSTFILL.FC = V2.FC AND ORIGIN_MUSTFILL.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT AND ORIGIN_MUSTFILL.OTF = V2.OTF and ORIGIN_MUSTFILL.LT = V2.LT
--WHERE V2.ITEMID = 55534 AND V2.FC = 'IN'
GROUP BY V2.SUPPLIERID, V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.MULTIPLE_ORIGIN, V2.OTF, V2.LT, ORIGIN_MUSTFILL.ORDERABLE_COUNT
);


--Primary Output Calculations
----------------------------------------------------------------------------------------------------------------------------
------------------------------------------- ############# ORIGIN 1 ############# -------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
create or replace temp table FC_ORIGIN_1 as (
Select
    V2.*,
    -- MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED) as Prev_TOTAL_ORIGIN_CUBEASSIGNED,
    
    IFNULL(CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - 0)
            WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0
            WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - 0)
            WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - 0)
            WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
            ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - 0) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - 0) * 
                CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END, 0) as TOTAL_ORIGIN_CUBEASSIGNED,
            
    CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - 0) --not executed because the order count is not null
        WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0 --N/A
        WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - 0) --This is executed
        WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - 0)
        WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
        ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - 0) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - 0) * 
            CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END as ORIGIN_CUBEASSIGNED
FROM PreFinalOutputV2 V2
-- LEFT JOIN ORIGIN_SETUP on ORIGIN_SETUP.ITEMID = V2.ITEMID AND ORIGIN_SETUP.FC = V2.FC AND ORIGIN_SETUP.OTF = V2.OTF AND ORIGIN_SETUP.LT = V2.LT AND ORIGIN_SETUP.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN MAXRANK on MAXRANK.ITEMID = V2.ITEMID AND MAXRANK.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT AND MAXRANK.FC = V2.FC AND MAXRANK.MULTIPLE_ORIGIN = V2.MULTIPLE_ORIGIN AND MAXRANK.OTF = V2.OTF AND MAXRANK.LT = V2.LT
    
WHERE V2.FC_ORIGINRANK = 1
-- AND V2.ITEMID = 74689
GROUP BY V2.SUPPLIERID, V2.CONSOLIDATION_TYPE, V2.MULTIPLE_ORIGIN, V2.CONSOLIDATION_TYPE, V2.CUMULATIVE_AVAIL, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.ORIGIN, V2.UPDATED_ORDERTYPE, V2.ORDERTYPE, V2.ORDER_CUBE, V2.FC_ORIGINRANK, V2.ITEM_FCORIGINRANK, V2.ORIGIN_CUBETARGET, V2.ORIGIN_MULTIPLIER, V2.ORIGIN_UNIQUECUBE, V2.ORIGIN_CUBENEED, V2.AGG_ORDER_CUBE
);

----------------------------------------------------------------------------------------------------------------------------
------------------------------------------- ############# ORIGIN 2 ############# -------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
create or replace temp table ORIGIN_SETUP as (
Select
    V2.ITEMID,
    V2.FC,
    V2.ORDERTYPE,
    V2.OTF,
    V2.LT,
    V2.RFP_ITERATION_COUNT,
    (IFNULL(MIN(FC_ORIGIN_1.ORIGIN_CUBEASSIGNED), 0)) as Prev_TOTAL_ORIGIN_CUBEASSIGNED
from PreFinalOutputV2 V2
LEFT JOIN FC_ORIGIN_1 on FC_ORIGIN_1.ITEMID = V2.ITEMID AND FC_ORIGIN_1.FC = V2.FC AND FC_ORIGIN_1.OTF = V2.OTF AND FC_ORIGIN_1.LT = V2.LT AND FC_ORIGIN_1.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
-- WHERE V2.ITEMID = 74689
GROUP BY V2.ITEMID, V2.FC, V2.ORDERTYPE, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT
);

create or replace temp table FC_ORIGIN_2 as (
Select
    V2.*,
    -- MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED) as Prev_TOTAL_ORIGIN_CUBEASSIGNED,
    
    IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0
            WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
            ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
                CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END, 0) as TOTAL_ORIGIN_CUBEASSIGNED,
            
    CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --not executed because the order count is not null
        WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0 --N/A
        WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --This is executed
        WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
        WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
        ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
            CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END as ORIGIN_CUBEASSIGNED
FROM PreFinalOutputV2 V2
LEFT JOIN ORIGIN_SETUP on ORIGIN_SETUP.ITEMID = V2.ITEMID AND ORIGIN_SETUP.FC = V2.FC AND ORIGIN_SETUP.OTF = V2.OTF AND ORIGIN_SETUP.LT = V2.LT AND ORIGIN_SETUP.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN MAXRANK on MAXRANK.ITEMID = V2.ITEMID AND MAXRANK.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT AND MAXRANK.FC = V2.FC AND MAXRANK.MULTIPLE_ORIGIN = V2.MULTIPLE_ORIGIN AND MAXRANK.OTF = V2.OTF AND MAXRANK.LT = V2.LT
    
WHERE V2.FC_ORIGINRANK = 2
-- AND V2.ITEMID = 74689
GROUP BY V2.SUPPLIERID, V2.CONSOLIDATION_TYPE, V2.MULTIPLE_ORIGIN, V2.CONSOLIDATION_TYPE, V2.CUMULATIVE_AVAIL, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.ORIGIN, V2.UPDATED_ORDERTYPE, V2.ORDERTYPE, V2.ORDER_CUBE, V2.FC_ORIGINRANK, V2.ITEM_FCORIGINRANK, V2.ORIGIN_CUBETARGET, V2.ORIGIN_MULTIPLIER, V2.ORIGIN_UNIQUECUBE, V2.ORIGIN_CUBENEED, V2.AGG_ORDER_CUBE
);

----------------------------------------------------------------------------------------------------------------------------
------------------------------------------- ############# ORIGIN 3 ############# -------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
create or replace temp table ORIGIN_SETUP as (
Select
    V2.ITEMID,
    V2.FC,
    V2.ORDERTYPE,
    V2.OTF,
    V2.LT,
    V2.RFP_ITERATION_COUNT,
    (IFNULL(MIN(FC_ORIGIN_1.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_2.ORIGIN_CUBEASSIGNED), 0)) as Prev_TOTAL_ORIGIN_CUBEASSIGNED
from PreFinalOutputV2 V2
LEFT JOIN FC_ORIGIN_1 on FC_ORIGIN_1.ITEMID = V2.ITEMID AND FC_ORIGIN_1.FC = V2.FC AND FC_ORIGIN_1.OTF = V2.OTF AND FC_ORIGIN_1.LT = V2.LT AND FC_ORIGIN_1.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_2 on FC_ORIGIN_2.ITEMID = V2.ITEMID AND FC_ORIGIN_2.FC = V2.FC AND FC_ORIGIN_2.OTF = V2.OTF AND FC_ORIGIN_2.LT = V2.LT AND FC_ORIGIN_2.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
-- WHERE V2.ITEMID = 74689
GROUP BY V2.ITEMID, V2.FC, V2.ORDERTYPE, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT
);

create or replace temp table FC_ORIGIN_3 as (
Select
    V2.*,
    -- MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED) as Prev_TOTAL_ORIGIN_CUBEASSIGNED,
    
    IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0
            WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
            ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
                CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END, 0) as TOTAL_ORIGIN_CUBEASSIGNED,
            
    CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --not executed because the order count is not null
        WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0 --N/A
        WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --This is executed
        WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
        WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
        ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
            CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END as ORIGIN_CUBEASSIGNED
FROM PreFinalOutputV2 V2
LEFT JOIN ORIGIN_SETUP on ORIGIN_SETUP.ITEMID = V2.ITEMID AND ORIGIN_SETUP.FC = V2.FC AND ORIGIN_SETUP.OTF = V2.OTF AND ORIGIN_SETUP.LT = V2.LT AND ORIGIN_SETUP.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN MAXRANK on MAXRANK.ITEMID = V2.ITEMID AND MAXRANK.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT AND MAXRANK.FC = V2.FC AND MAXRANK.MULTIPLE_ORIGIN = V2.MULTIPLE_ORIGIN AND MAXRANK.OTF = V2.OTF AND MAXRANK.LT = V2.LT
    
WHERE V2.FC_ORIGINRANK = 3 
-- AND V2.ITEMID = 74689
GROUP BY V2.SUPPLIERID, V2.CONSOLIDATION_TYPE, V2.MULTIPLE_ORIGIN, V2.CONSOLIDATION_TYPE, V2.CUMULATIVE_AVAIL, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.ORIGIN, V2.UPDATED_ORDERTYPE, V2.ORDERTYPE, V2.ORDER_CUBE, V2.FC_ORIGINRANK, V2.ITEM_FCORIGINRANK, V2.ORIGIN_CUBETARGET, V2.ORIGIN_MULTIPLIER, V2.ORIGIN_UNIQUECUBE, V2.ORIGIN_CUBENEED, V2.AGG_ORDER_CUBE
);

----------------------------------------------------------------------------------------------------------------------------
------------------------------------------- ############# ORIGIN 4 ############# -------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
create or replace temp table ORIGIN_SETUP as (
Select
    V2.ITEMID,
    V2.FC,
    V2.ORDERTYPE,
    V2.OTF,
    V2.LT,
    V2.RFP_ITERATION_COUNT,
    (IFNULL(MIN(FC_ORIGIN_1.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_2.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_3.ORIGIN_CUBEASSIGNED), 0)) as Prev_TOTAL_ORIGIN_CUBEASSIGNED
from PreFinalOutputV2 V2
LEFT JOIN FC_ORIGIN_1 on FC_ORIGIN_1.ITEMID = V2.ITEMID AND FC_ORIGIN_1.FC = V2.FC AND FC_ORIGIN_1.OTF = V2.OTF AND FC_ORIGIN_1.LT = V2.LT AND FC_ORIGIN_1.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_2 on FC_ORIGIN_2.ITEMID = V2.ITEMID AND FC_ORIGIN_2.FC = V2.FC AND FC_ORIGIN_2.OTF = V2.OTF AND FC_ORIGIN_2.LT = V2.LT AND FC_ORIGIN_2.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_3 on FC_ORIGIN_3.ITEMID = V2.ITEMID AND FC_ORIGIN_3.FC = V2.FC AND FC_ORIGIN_3.OTF = V2.OTF AND FC_ORIGIN_3.LT = V2.LT AND FC_ORIGIN_3.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
-- WHERE V2.ITEMID = 74689
GROUP BY V2.ITEMID, V2.FC, V2.ORDERTYPE, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT
);

create or replace temp table FC_ORIGIN_4 as (
Select
    V2.*,
    -- MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED) as Prev_TOTAL_ORIGIN_CUBEASSIGNED,
    
    IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0
            WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
            ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
                CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END, 0) as TOTAL_ORIGIN_CUBEASSIGNED,
            
    CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --not executed because the order count is not null
        WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0 --N/A
        WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --This is executed
        WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
        WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
        ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
            CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END as ORIGIN_CUBEASSIGNED
FROM PreFinalOutputV2 V2
LEFT JOIN ORIGIN_SETUP on ORIGIN_SETUP.ITEMID = V2.ITEMID AND ORIGIN_SETUP.FC = V2.FC AND ORIGIN_SETUP.OTF = V2.OTF AND ORIGIN_SETUP.LT = V2.LT AND ORIGIN_SETUP.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN MAXRANK on MAXRANK.ITEMID = V2.ITEMID AND MAXRANK.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT AND MAXRANK.FC = V2.FC AND MAXRANK.MULTIPLE_ORIGIN = V2.MULTIPLE_ORIGIN AND MAXRANK.OTF = V2.OTF AND MAXRANK.LT = V2.LT
    
WHERE V2.FC_ORIGINRANK = 4
-- AND V2.ITEMID = 74689
GROUP BY V2.SUPPLIERID, V2.CONSOLIDATION_TYPE, V2.MULTIPLE_ORIGIN, V2.CONSOLIDATION_TYPE, V2.CUMULATIVE_AVAIL, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.ORIGIN, V2.UPDATED_ORDERTYPE, V2.ORDERTYPE, V2.ORDER_CUBE, V2.FC_ORIGINRANK, V2.ITEM_FCORIGINRANK, V2.ORIGIN_CUBETARGET, V2.ORIGIN_MULTIPLIER, V2.ORIGIN_UNIQUECUBE, V2.ORIGIN_CUBENEED, V2.AGG_ORDER_CUBE
);

----------------------------------------------------------------------------------------------------------------------------
------------------------------------------- ############# ORIGIN 5 ############# -------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
create or replace temp table ORIGIN_SETUP as (
Select
    V2.ITEMID,
    V2.FC,
    V2.ORDERTYPE,
    V2.OTF,
    V2.LT,
    V2.RFP_ITERATION_COUNT,
    (IFNULL(MIN(FC_ORIGIN_1.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_2.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_3.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_4.ORIGIN_CUBEASSIGNED), 0)) as Prev_TOTAL_ORIGIN_CUBEASSIGNED
from PreFinalOutputV2 V2
LEFT JOIN FC_ORIGIN_1 on FC_ORIGIN_1.ITEMID = V2.ITEMID AND FC_ORIGIN_1.FC = V2.FC AND FC_ORIGIN_1.OTF = V2.OTF AND FC_ORIGIN_1.LT = V2.LT AND FC_ORIGIN_1.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_2 on FC_ORIGIN_2.ITEMID = V2.ITEMID AND FC_ORIGIN_2.FC = V2.FC AND FC_ORIGIN_2.OTF = V2.OTF AND FC_ORIGIN_2.LT = V2.LT AND FC_ORIGIN_2.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_3 on FC_ORIGIN_3.ITEMID = V2.ITEMID AND FC_ORIGIN_3.FC = V2.FC AND FC_ORIGIN_3.OTF = V2.OTF AND FC_ORIGIN_3.LT = V2.LT AND FC_ORIGIN_3.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_4 on FC_ORIGIN_4.ITEMID = V2.ITEMID AND FC_ORIGIN_4.FC = V2.FC AND FC_ORIGIN_4.OTF = V2.OTF AND FC_ORIGIN_4.LT = V2.LT AND FC_ORIGIN_4.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
-- WHERE V2.ITEMID = 74689
GROUP BY V2.ITEMID, V2.FC, V2.ORDERTYPE, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT
);

create or replace temp table FC_ORIGIN_5 as (
Select
    V2.*,
    -- MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED) as Prev_TOTAL_ORIGIN_CUBEASSIGNED,
    
    IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0
            WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
            ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
                CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END, 0) as TOTAL_ORIGIN_CUBEASSIGNED,
            
    CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --not executed because the order count is not null
        WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0 --N/A
        WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --This is executed
        WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
        WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
        ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
            CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END as ORIGIN_CUBEASSIGNED
FROM PreFinalOutputV2 V2
LEFT JOIN ORIGIN_SETUP on ORIGIN_SETUP.ITEMID = V2.ITEMID AND ORIGIN_SETUP.FC = V2.FC AND ORIGIN_SETUP.OTF = V2.OTF AND ORIGIN_SETUP.LT = V2.LT AND ORIGIN_SETUP.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN MAXRANK on MAXRANK.ITEMID = V2.ITEMID AND MAXRANK.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT AND MAXRANK.FC = V2.FC AND MAXRANK.MULTIPLE_ORIGIN = V2.MULTIPLE_ORIGIN AND MAXRANK.OTF = V2.OTF AND MAXRANK.LT = V2.LT
    
WHERE V2.FC_ORIGINRANK = 5 
-- AND V2.ITEMID = 74689
GROUP BY V2.SUPPLIERID, V2.CONSOLIDATION_TYPE, V2.MULTIPLE_ORIGIN, V2.CONSOLIDATION_TYPE, V2.CUMULATIVE_AVAIL, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.ORIGIN, V2.UPDATED_ORDERTYPE, V2.ORDERTYPE, V2.ORDER_CUBE, V2.FC_ORIGINRANK, V2.ITEM_FCORIGINRANK, V2.ORIGIN_CUBETARGET, V2.ORIGIN_MULTIPLIER, V2.ORIGIN_UNIQUECUBE, V2.ORIGIN_CUBENEED, V2.AGG_ORDER_CUBE
);

----------------------------------------------------------------------------------------------------------------------------
------------------------------------------- ############# ORIGIN 6 ############# -------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
create or replace temp table ORIGIN_SETUP as (
Select
    V2.ITEMID,
    V2.FC,
    V2.ORDERTYPE,
    V2.OTF,
    V2.LT,
    V2.RFP_ITERATION_COUNT,
    (IFNULL(MIN(FC_ORIGIN_1.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_2.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_3.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_4.ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(MIN(FC_ORIGIN_5.ORIGIN_CUBEASSIGNED), 0)) as Prev_TOTAL_ORIGIN_CUBEASSIGNED
from PreFinalOutputV2 V2
LEFT JOIN FC_ORIGIN_1 on FC_ORIGIN_1.ITEMID = V2.ITEMID AND FC_ORIGIN_1.FC = V2.FC AND FC_ORIGIN_1.OTF = V2.OTF AND FC_ORIGIN_1.LT = V2.LT AND FC_ORIGIN_1.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_2 on FC_ORIGIN_2.ITEMID = V2.ITEMID AND FC_ORIGIN_2.FC = V2.FC AND FC_ORIGIN_2.OTF = V2.OTF AND FC_ORIGIN_2.LT = V2.LT AND FC_ORIGIN_2.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_3 on FC_ORIGIN_3.ITEMID = V2.ITEMID AND FC_ORIGIN_3.FC = V2.FC AND FC_ORIGIN_3.OTF = V2.OTF AND FC_ORIGIN_3.LT = V2.LT AND FC_ORIGIN_3.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_4 on FC_ORIGIN_4.ITEMID = V2.ITEMID AND FC_ORIGIN_4.FC = V2.FC AND FC_ORIGIN_4.OTF = V2.OTF AND FC_ORIGIN_4.LT = V2.LT AND FC_ORIGIN_4.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_5 on FC_ORIGIN_5.ITEMID = V2.ITEMID AND FC_ORIGIN_5.FC = V2.FC AND FC_ORIGIN_5.OTF = V2.OTF AND FC_ORIGIN_5.LT = V2.LT AND FC_ORIGIN_5.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
-- WHERE V2.ITEMID = 74689
GROUP BY V2.ITEMID, V2.FC, V2.ORDERTYPE, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT
);

create or replace temp table FC_ORIGIN_6 as (
Select
    V2.*,
    -- MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED) as Prev_TOTAL_ORIGIN_CUBEASSIGNED,
    
    IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0
            WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
            ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
                CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END, 0) as TOTAL_ORIGIN_CUBEASSIGNED,
            
    CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --not executed because the order count is not null
        WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0 --N/A
        WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --This is executed
        WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
        WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
        ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
            CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END as ORIGIN_CUBEASSIGNED
FROM PreFinalOutputV2 V2
LEFT JOIN ORIGIN_SETUP on ORIGIN_SETUP.ITEMID = V2.ITEMID AND ORIGIN_SETUP.FC = V2.FC AND ORIGIN_SETUP.OTF = V2.OTF AND ORIGIN_SETUP.LT = V2.LT AND ORIGIN_SETUP.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN MAXRANK on MAXRANK.ITEMID = V2.ITEMID AND MAXRANK.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT AND MAXRANK.FC = V2.FC AND MAXRANK.MULTIPLE_ORIGIN = V2.MULTIPLE_ORIGIN AND MAXRANK.OTF = V2.OTF AND MAXRANK.LT = V2.LT
    
WHERE V2.FC_ORIGINRANK = 6
-- AND V2.ITEMID = 74689
GROUP BY V2.SUPPLIERID, V2.CONSOLIDATION_TYPE, V2.MULTIPLE_ORIGIN, V2.CONSOLIDATION_TYPE, V2.CUMULATIVE_AVAIL, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.ORIGIN, V2.UPDATED_ORDERTYPE, V2.ORDERTYPE, V2.ORDER_CUBE, V2.FC_ORIGINRANK, V2.ITEM_FCORIGINRANK, V2.ORIGIN_CUBETARGET, V2.ORIGIN_MULTIPLIER, V2.ORIGIN_UNIQUECUBE, V2.ORIGIN_CUBENEED, V2.AGG_ORDER_CUBE
);

----------------------------------------------------------------------------------------------------------------------------
------------------------------------------- ############# ORIGIN 7 ############# -------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
create or replace temp table ORIGIN_SETUP as (
Select
    V2.ITEMID,
    V2.FC,
    V2.ORDERTYPE,
    V2.OTF,
    V2.LT,
    V2.RFP_ITERATION_COUNT,
    (IFNULL(MIN(FC_ORIGIN_1.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_2.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_3.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_4.ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(MIN(FC_ORIGIN_5.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_6.ORIGIN_CUBEASSIGNED), 0)) as Prev_TOTAL_ORIGIN_CUBEASSIGNED
from PreFinalOutputV2 V2
LEFT JOIN FC_ORIGIN_1 on FC_ORIGIN_1.ITEMID = V2.ITEMID AND FC_ORIGIN_1.FC = V2.FC AND FC_ORIGIN_1.OTF = V2.OTF AND FC_ORIGIN_1.LT = V2.LT AND FC_ORIGIN_1.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_2 on FC_ORIGIN_2.ITEMID = V2.ITEMID AND FC_ORIGIN_2.FC = V2.FC AND FC_ORIGIN_2.OTF = V2.OTF AND FC_ORIGIN_2.LT = V2.LT AND FC_ORIGIN_2.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_3 on FC_ORIGIN_3.ITEMID = V2.ITEMID AND FC_ORIGIN_3.FC = V2.FC AND FC_ORIGIN_3.OTF = V2.OTF AND FC_ORIGIN_3.LT = V2.LT AND FC_ORIGIN_3.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_4 on FC_ORIGIN_4.ITEMID = V2.ITEMID AND FC_ORIGIN_4.FC = V2.FC AND FC_ORIGIN_4.OTF = V2.OTF AND FC_ORIGIN_4.LT = V2.LT AND FC_ORIGIN_4.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_5 on FC_ORIGIN_5.ITEMID = V2.ITEMID AND FC_ORIGIN_5.FC = V2.FC AND FC_ORIGIN_5.OTF = V2.OTF AND FC_ORIGIN_5.LT = V2.LT AND FC_ORIGIN_5.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_6 on FC_ORIGIN_6.ITEMID = V2.ITEMID AND FC_ORIGIN_6.FC = V2.FC AND FC_ORIGIN_6.OTF = V2.OTF AND FC_ORIGIN_6.LT = V2.LT AND FC_ORIGIN_6.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
-- WHERE V2.ITEMID = 74689
GROUP BY V2.ITEMID, V2.FC, V2.ORDERTYPE, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT
);

create or replace temp table FC_ORIGIN_7 as (
Select
    V2.*,
    -- MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED) as Prev_TOTAL_ORIGIN_CUBEASSIGNED,
    
    IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0
            WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
            ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
                CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END, 0) as TOTAL_ORIGIN_CUBEASSIGNED,
            
    CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --not executed because the order count is not null
        WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0 --N/A
        WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --This is executed
        WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
        WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
        ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
            CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END as ORIGIN_CUBEASSIGNED
FROM PreFinalOutputV2 V2
LEFT JOIN ORIGIN_SETUP on ORIGIN_SETUP.ITEMID = V2.ITEMID AND ORIGIN_SETUP.FC = V2.FC AND ORIGIN_SETUP.OTF = V2.OTF AND ORIGIN_SETUP.LT = V2.LT AND ORIGIN_SETUP.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN MAXRANK on MAXRANK.ITEMID = V2.ITEMID AND MAXRANK.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT AND MAXRANK.FC = V2.FC AND MAXRANK.MULTIPLE_ORIGIN = V2.MULTIPLE_ORIGIN AND MAXRANK.OTF = V2.OTF AND MAXRANK.LT = V2.LT
    
WHERE V2.FC_ORIGINRANK = 7
-- AND V2.ITEMID = 74689
GROUP BY V2.SUPPLIERID, V2.CONSOLIDATION_TYPE, V2.MULTIPLE_ORIGIN, V2.CONSOLIDATION_TYPE, V2.CUMULATIVE_AVAIL, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.ORIGIN, V2.UPDATED_ORDERTYPE, V2.ORDERTYPE, V2.ORDER_CUBE, V2.FC_ORIGINRANK, V2.ITEM_FCORIGINRANK, V2.ORIGIN_CUBETARGET, V2.ORIGIN_MULTIPLIER, V2.ORIGIN_UNIQUECUBE, V2.ORIGIN_CUBENEED, V2.AGG_ORDER_CUBE
);

----------------------------------------------------------------------------------------------------------------------------
------------------------------------------- ############# ORIGIN 8 ############# -------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
create or replace temp table ORIGIN_SETUP as (
Select
    V2.ITEMID,
    V2.FC,
    V2.ORDERTYPE,
    V2.OTF,
    V2.LT,
    V2.RFP_ITERATION_COUNT,
    (IFNULL(MIN(FC_ORIGIN_1.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_2.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_3.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_4.ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(MIN(FC_ORIGIN_5.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_6.ORIGIN_CUBEASSIGNED), 0) + IFNULL(MIN(FC_ORIGIN_7.ORIGIN_CUBEASSIGNED), 0)) as Prev_TOTAL_ORIGIN_CUBEASSIGNED
from PreFinalOutputV2 V2
LEFT JOIN FC_ORIGIN_1 on FC_ORIGIN_1.ITEMID = V2.ITEMID AND FC_ORIGIN_1.FC = V2.FC AND FC_ORIGIN_1.OTF = V2.OTF AND FC_ORIGIN_1.LT = V2.LT AND FC_ORIGIN_1.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_2 on FC_ORIGIN_2.ITEMID = V2.ITEMID AND FC_ORIGIN_2.FC = V2.FC AND FC_ORIGIN_2.OTF = V2.OTF AND FC_ORIGIN_2.LT = V2.LT AND FC_ORIGIN_2.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_3 on FC_ORIGIN_3.ITEMID = V2.ITEMID AND FC_ORIGIN_3.FC = V2.FC AND FC_ORIGIN_3.OTF = V2.OTF AND FC_ORIGIN_3.LT = V2.LT AND FC_ORIGIN_3.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_4 on FC_ORIGIN_4.ITEMID = V2.ITEMID AND FC_ORIGIN_4.FC = V2.FC AND FC_ORIGIN_4.OTF = V2.OTF AND FC_ORIGIN_4.LT = V2.LT AND FC_ORIGIN_4.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_5 on FC_ORIGIN_5.ITEMID = V2.ITEMID AND FC_ORIGIN_5.FC = V2.FC AND FC_ORIGIN_5.OTF = V2.OTF AND FC_ORIGIN_5.LT = V2.LT AND FC_ORIGIN_5.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_6 on FC_ORIGIN_6.ITEMID = V2.ITEMID AND FC_ORIGIN_6.FC = V2.FC AND FC_ORIGIN_6.OTF = V2.OTF AND FC_ORIGIN_6.LT = V2.LT AND FC_ORIGIN_6.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN FC_ORIGIN_7 on FC_ORIGIN_7.ITEMID = V2.ITEMID AND FC_ORIGIN_7.FC = V2.FC AND FC_ORIGIN_7.OTF = V2.OTF AND FC_ORIGIN_7.LT = V2.LT AND FC_ORIGIN_7.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
-- WHERE V2.ITEMID = 74689
GROUP BY V2.ITEMID, V2.FC, V2.ORDERTYPE, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT
);

create or replace temp table FC_ORIGIN_8 as (
Select
    V2.*,
    -- MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED) as Prev_TOTAL_ORIGIN_CUBEASSIGNED,
    
    IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0) +
        IFNULL(CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0
            WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
            WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
            ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
                CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END, 0) as TOTAL_ORIGIN_CUBEASSIGNED,
            
    CASE WHEN (MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK AND MAX(MAXRANK.ORDERABLE_COUNT) IS NULL) THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --not executed because the order count is not null
        WHEN V2.CONSOLIDATION_TYPE = 'NO_ORDER' THEN 0 --N/A
        WHEN MAX(MAXRANK.MAXRANK) = V2.FC_ORIGINRANK THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) --This is executed
        WHEN (V2.MULTIPLE_ORIGIN = 0 OR V2.CONSOLIDATION_TYPE = 'SINGLE_ORIGIN') THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0))
        WHEN V2.CUMULATIVE_AVAIL IS NULL THEN 0
        ELSE CASE WHEN GREATEST(0, V2.CUMULATIVE_AVAIL - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) <= V2.ORIGIN_CUBENEED THEN GREATEST(0, V2.ORDER_CUBE - IFNULL(MIN(ORIGIN_SETUP.Prev_TOTAL_ORIGIN_CUBEASSIGNED), 0)) * 
            CASE WHEN V2.CONSOLIDATION_TYPE = 'POSSIBLE_COMBINED_ROUND' THEN IFNULL(V2.ORIGIN_MULTIPLIER, 1) ELSE 1 END END END as ORIGIN_CUBEASSIGNED
FROM PreFinalOutputV2 V2
LEFT JOIN ORIGIN_SETUP on ORIGIN_SETUP.ITEMID = V2.ITEMID AND ORIGIN_SETUP.FC = V2.FC AND ORIGIN_SETUP.OTF = V2.OTF AND ORIGIN_SETUP.LT = V2.LT AND ORIGIN_SETUP.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT
LEFT JOIN MAXRANK on MAXRANK.ITEMID = V2.ITEMID AND MAXRANK.RFP_ITERATION_COUNT = V2.RFP_ITERATION_COUNT AND MAXRANK.FC = V2.FC AND MAXRANK.MULTIPLE_ORIGIN = V2.MULTIPLE_ORIGIN AND MAXRANK.OTF = V2.OTF AND MAXRANK.LT = V2.LT
    
WHERE V2.FC_ORIGINRANK = 8 
-- AND V2.ITEMID = 74689
GROUP BY V2.SUPPLIERID, V2.CONSOLIDATION_TYPE, V2.MULTIPLE_ORIGIN, V2.CONSOLIDATION_TYPE, V2.CUMULATIVE_AVAIL, V2.OTF, V2.LT, V2.RFP_ITERATION_COUNT, V2.FC, V2.ITEMID, V2.ORIGIN, V2.UPDATED_ORDERTYPE, V2.ORDERTYPE, V2.ORDER_CUBE, V2.FC_ORIGINRANK, V2.ITEM_FCORIGINRANK, V2.ORIGIN_CUBETARGET, V2.ORIGIN_MULTIPLIER, V2.ORIGIN_UNIQUECUBE, V2.ORIGIN_CUBENEED, V2.AGG_ORDER_CUBE
);

-- Select * from FC_ORIGIN_1 WHERE ITEMID = 263134 --AND FC = 'GA'

--Normal Output
create or replace temp table AGG_OUTPUT as (
Select * from FC_ORIGIN_1 
UNION ALL
Select * from FC_ORIGIN_2 
UNION ALL
Select * from FC_ORIGIN_3 
UNION ALL
Select * from FC_ORIGIN_4 
UNION ALL
Select * from FC_ORIGIN_5
UNION ALL
Select * from FC_ORIGIN_6 
UNION ALL
Select * from FC_ORIGIN_7 
UNION ALL
Select * from FC_ORIGIN_8 
);

-- Select * from AGG_OUTPUT WHERE ITEMID = 263134
create or replace table INVENTORYSANDBOX.DBO.RFP_Simulation_OriginDecision as (
Select
    IB_OPT.*,
    -- AGG_OUTPUT.ITEMID,6
    -- AGG_OUTPUT.FC,
    -- AGG_OUTPUT.RFP_ITERATION_COUNT,
    -- AGG_OUTPUT.UPDATED_ORDERTYPE,
    -- AGG_OUTPUT.OTF,
    -- AGG_OUTPUT.LT,
    AGG_OUTPUT.ORIGIN_CUBETARGET,
    --AGG_OUTPUT.ORIGIN_CUBEASSIGNED,
    -- prod.ITEMCUBE,
    IFNULL(ROUND(AGG_OUTPUT.ORIGIN_CUBEASSIGNED / GREATEST(.0000001, prod.ITEMCUBE), 0), 0) as UPDATED_ORDERQTY --prod.ITEMCUBE
from AGG_OUTPUT
LEFT JOIN (Select DISTINCT ITEMID, MIN(ITEMCUBE) as ITEMCUBE FROM IBOptUse GROUP BY ITEMID) prod on prod.ITEMID = AGG_OUTPUT.ITEMID
LEFT JOIN IBOptUse IB_OPT on IB_OPT.ITEMID = AGG_OUTPUT.ITEMID AND IB_OPT.FC = AGG_OUTPUT.FC AND IB_OPT.RFP_ITERATION_COUNT = AGG_OUTPUT.RFP_ITERATION_COUNT AND IB_OPT.UPDATED_ORDERTYPE = AGG_OUTPUT.UPDATED_ORDERTYPE AND IB_OPT.OTF = AGG_OUTPUT.OTF AND IB_OPT.LT = AGG_OUTPUT.LT
-- WHERE ROUND(AGG_OUTPUT.ORIGIN_CUBEASSIGNED / GREATEST(.0000001, prod.ITEMCUBE), 0) > 0
-- WHERE IB_OPT.ITEMID = 263571
);



--Testing Output Section
-- Select * from ORIGIN_RANK WHERE SUPPLIERID = 386 AND FC = 'GA'
-- Select * from FC_ORIGIN_1 WHERE ITEMID = 263571 AND FC = 'GA'
-- Select * from FC_ORIGIN_2 WHERE ITEMID = 263571 AND FC = 'GA' --Qty Assigned
-- Select * from FC_ORIGIN_3 WHERE ITEMID = 263571 AND FC = 'GA'
-- Select * from FC_ORIGIN_4 WHERE ITEMID = 263571 AND FC = 'GA'
-- Select * from FC_ORIGIN_5 WHERE ITEMID = 263571 AND FC = 'GA' --Qty Assigned
-- Select * from FC_ORIGIN_6 WHERE ITEMID = 74689
-- Select * from FC_ORIGIN_7 WHERE ITEMID = 74689
-- Select * from FC_ORIGIN_8 WHERE ITEMID = 74689


execute task inventorysandbox.DBO.AOG_Orch_Simulation_B;

END;


--import and domestic breakdown for henry, LAS OB volume and SAV OB volume
